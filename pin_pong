# Импорт библиотек
from pygame import *
'''Необходимые классы'''

#класс-родитель для спрайтов 
class GameSprite(sprite.Sprite):
    #конструктор класса
       #конструктор класса (ссылка на экземпляр класса, изображение, координата x, координата y, скорость (движения), ширина, высота) 
    def __init__(self, player_image, player_x, player_y, player_speed, wight, height): # добавить еще два параметра при создании и задавать размер прямоугольгника для картинки самим
        super().__init__() # Вызываем конструктор класса родителя, что бы его дополнить

        # каждый спрайт должен хранить свойство image - изображение
        self.image = transform.scale(image.load(player_image), (wight, height)) # вместе 55,55 - параметры
        self.speed = player_speed

        # каждый спрайт должен хранить свойство rect - прямоугольник, в который он вписан
        self.rect = self.image.get_rect() # Создаем объект типа Rect (прямоугольник)
        self.rect.x = player_x
        self.rect.y = player_y

    # метод который отображает спрайт в заданной координате x и y
    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

#класс-наследник для спрайта-игрока (управляется стрелками)
class Player(GameSprite):

    # Метод который отвечает за движение правой ракетки вниз и вверх с помощью стрелок на клавиатуре 
    def update_r(self):
        keys = key.get_pressed() # Получаем ключи (Что бы оброщаться к кнопкам по имени)

        # Если нажата клавиша "Стрелочка вверх", то передвигаем объект вверх
        if keys[K_UP] and self.rect.y > 5: 
            self.rect.y -= self.speed 
        # Если нажата клавиша "Стрелочка вниз", то передвигаем объект вниз
        if keys[K_DOWN] and self.rect.y < win_height - 80: 
            self.rect.y += self.speed
    
    # Метод который отвечает за движение левой ракетки вниз и вверх с помощью клавиш W и S на клавиатуре
    def update_l(self):
        keys = key.get_pressed() # Получаем ключи (Что бы оброщаться к кнопкам по имени)
        # Если нажата клавиша "W", то передвигаем объект вверх
        if keys[K_w] and self.rect.y > 5:
            self.rect.y -= self.speed
        # # Если нажата клавиша "S", то передвигаем объект вниз
        if keys[K_s] and self.rect.y < win_height - 80:
            self.rect.y += self.speed

#Игровая сцена:
back = (200, 255, 255) # цвет фона (background)
win_width = 600 # Ширина игрового окна
win_height = 500 # Высота игрового окна
window = display.set_mode((win_width, win_height)) # Задаем окну ширину и высоту 
window.fill(back) # Закрашиваем фон заданным цветом

#флаги отвечающие за состояние игры
game = True
finish = False
clock = time.Clock() # Объект для отслеживания времени
FPS = 60 # Частота обновления экрана (кадры в секунду)

#создания мяча и ракетки    
# Первым параметром идет название изображения,которое мы подгружаем, затем:координата x, координата y, скорость (движения), ширина, высота )
racket1 = Player('racket.png', 30, 200, 4, 50, 150) # при созданни спрайта добавляется еще два параметра
racket2 = Player('racket.png', 520, 200, 4, 50, 150)
ball = GameSprite('tenis_ball.png', 200, 200, 4, 50, 50)

# Добавление текстовых надписей 
font.init() 
font = font.Font(None, 35) # Первый параметр это адрес шрифта, второй размер в пикселях
lose1 = font.render('PLAYER 1 LOSE!', True, (180, 0, 0)) # Задаем надпись "Игрок 1 проиграл", сглаживание, цвет шрифта
lose2 = font.render('PLAYER 2 LOSE!', True, (180, 0, 0)) # Задаем надпись " Игрок 2 проиграл", сглаживание, цвет шрифта

speed_x = 3
speed_y = 3

# Игровой цикл
while game:
    # Получаем список экентов, если нажат крестик, то программа завершает работу
    for e in event.get():
        if e.type == QUIT:
            game = False

# Если финиширует игрок то:
    if finish != True:
        window.fill(back)# закрашиваем фон заданным цветом
        racket1.update_l() # передвижение левой ракетки
        racket2.update_r() # передвижение правой ракетки
        # Передвижение мяча
        ball.rect.x += speed_x 
        ball.rect.y += speed_y

        # если мяч соприкасается с ракеткой то передвигаем мяч
        if sprite.collide_rect(racket1, ball) or sprite.collide_rect(racket2, ball):
            speed_x *= -1
            speed_y *= 1

        # если мяч достигает границ экрана меняем направление его движения
        if ball.rect.y > win_height-50 or ball.rect.y < 0:
            speed_y *= -1

        # если мяч улетел дальше ракетки, выводим условие проигрыша для первого игрока
        if ball.rect.x < 0:
            finish = True
            window.blit(lose1, (200, 200)))# Параметры: надпись, координаты 
            game_over = True

        # если мяч улетел дальше ракетки, выводим условие проигрыша для второго игрока
        if ball.rect.x > win_width:
            finish = True
            window.blit(lose2, (200, 200))# Параметры: надпись, координаты 
            game_over = True
        
        # Отображаем объекты
        racket1.reset() 
        racket2.reset()
        ball.reset()

    # Обновление экрана и установка счетчика FPS 
    display.update()
    clock.tick(FPS)
